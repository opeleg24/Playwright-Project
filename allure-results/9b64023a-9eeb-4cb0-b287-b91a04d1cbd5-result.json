{"name": "Test01: Verify site header name", "status": "failed", "statusDetails": {"message": "AssertionError: Expected: GREENKART, but got: GREENKARTttt", "trace": "self = <test_cases.test_web.Test_Web object at 0x0000021CCF0B46E0>\n\n    @allure.title(\"Test01: Verify site header name\")\n    @allure.description(\"This test verifies the site header name matches the expected name\")\n    def test01_verify_empty_results(self):\n>       Verifications.verify_equals(text, UiActions.get_text(base.home_page.get_header_name()))\n\ntest_cases\\test_web.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 'GREENKARTttt', expected = 'GREENKART'\n\n    @staticmethod\n    @allure.step(\"Verifying equals\")\n    def verify_equals(actual, expected):\n>       assert actual == expected, f\"Expected: {expected}, but got: {actual}\"\nE       AssertionError: Expected: GREENKART, but got: GREENKARTttt\n\nextentions\\verifications.py:10: AssertionError"}, "description": "This test verifies the site header name matches the expected name", "steps": [{"name": "Getting text", "status": "passed", "parameters": [{"name": "locator", "value": "<Locator frame=<Frame name= url='https://rahulshettyacademy.com/seleniumPractise/#/'> selector=\"[class='brand greenLogo']\">"}], "start": 1729166202203, "stop": 1729166202250}, {"name": "Verifying equals", "status": "failed", "statusDetails": {"message": "AssertionError: Expected: GREENKART, but got: GREENKARTttt\n", "trace": "  File \"C:\\Automation\\Playwright\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Automation\\playwright_project\\extentions\\verifications.py\", line 10, in verify_equals\n    assert actual == expected, f\"Expected: {expected}, but got: {actual}\"\n"}, "parameters": [{"name": "actual", "value": "'GREENKARTttt'"}, {"name": "expected", "value": "'GREENKART'"}], "start": 1729166202251, "stop": 1729166202251}], "attachments": [{"source": "24def1cc-d265-4890-9684-7925c51e6707-attachment.png", "type": "image/png"}], "start": 1729166202203, "stop": 1729166202252, "uuid": "3fcf429e-fed1-4a80-be73-abe683c60b57", "historyId": "16ae3678846476292963c92b83612dd8", "testCaseId": "16ae3678846476292963c92b83612dd8", "fullName": "test_cases.test_web.Test_Web#test01_verify_empty_results", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_page')"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_web"}, {"name": "subSuite", "value": "Test_Web"}, {"name": "host", "value": "DESKTOP-L1RTC3B"}, {"name": "thread", "value": "1940-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_web"}]}